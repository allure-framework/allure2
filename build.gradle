import com.bmuschko.gradle.docker.tasks.image.Dockerfile

description = 'Allure Report'

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'ru.vyarus:gradle-quality-plugin:3.1.0'
    }
}

ext {
    linkHomepage = 'https://qameta.io/allure'
    linkCi = 'https://ci.qameta.in/job/allure2_deploy/'
    linkScmUrl = 'https://github.com/allure-framework/allure2'
    linkScmConnection = 'scm:git:git://github.com/allure-framework/allure2.git'
    linkScmDevConnection = 'scm:git:ssh://git@github.com:allure-framework/allure2.git'
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}


apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"

configure(rootProject) {
    description = "Allure Report"

    apply plugin: 'com.bmuschko.docker-remote-api'

    String root = rootProject.projectDir

    task build() {
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.8.1'
    }

    task deleteDemoReport(type: Delete) {
        delete "${root}/build/docker/report"
    }

    task generateDemoReport(type: Exec) {
        dependsOn = ['deleteDemoReport', 'allure-commandline:build']
        executable = "${root}/allure-commandline/build/install/allure/bin/allure"
        args = ['generate', "${root}/allure-web/test-data/demo", '-o', "${root}/build/docker/report"]
    }

    task generateDemoDockerfile(type: Dockerfile) {
        dependsOn = ['generateDemoReport']
        destFile project.file('build/docker/Dockerfile')

        from 'nginx'
        maintainer 'Dmitry Baev <baev@qameta.io>'
        addFile 'report', '/usr/share/nginx/html'
    }
}

allprojects {
    group = project.name.endsWith('plugin') ? 'io.qameta.allure.plugins' : 'io.qameta.allure'
    version = version

    configurations {
        allurePlugin
    }

    tasks.withType(Tar) {
        compression = Compression.GZIP
    }

    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        imports {
            mavenBom 'com.fasterxml.jackson:jackson-bom:2.9.6'
        }
        dependencies {
            dependency 'com.beust:jcommander:1.72'
            dependency 'com.google.guava:guava:23.5-jre'
            dependency 'com.opencsv:opencsv:4.2'
            dependency 'com.vladsch.flexmark:flexmark:0.34.8'
            dependency 'com.squareup.retrofit2:retrofit:2.4.0'
            dependency 'com.squareup.retrofit2:converter-jackson:2.4.0'
            dependency 'commons-io:commons-io:2.6'
            dependency 'io.qameta.allure:allure-java-commons:2.6.0'
            dependency 'io.qameta.allure:allure2-model-api:1.0.0'
            dependency 'javax.xml.bind:jaxb-api:2.3.0'
            dependency 'junit:junit:4.12'
            dependency 'org.allurefw:allure1-model:1.0'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.commons:commons-text:1.4'
            dependency 'org.apache.httpcomponents:httpclient:4.5.6'
            dependency 'org.apache.tika:tika-core:1.18'
            dependency 'org.assertj:assertj-core:3.10.0'
            dependency 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
            dependency 'org.freemarker:freemarker:2.3.28'
            dependency 'org.mockito:mockito-core:2.19.1'
            dependency 'org.projectlombok:lombok:1.18.0'
            dependency 'org.slf4j:slf4j-api:1.7.25'
            dependency 'org.slf4j:slf4j-log4j12:1.7.25'
            dependency 'org.slf4j:slf4j-nop:1.7.25'
            dependency 'org.slf4j:slf4j-simple:1.7.25'
            dependency 'org.zeroturnaround:zt-zip:1.13'
            dependency 'com.github.stefanbirkner:system-rules:1.18.0'
        }
    }

    repositories {
        jcenter()
    }
}

subprojects { project ->
    apply plugin: 'java'
    apply plugin: 'maven'
    apply from: "${gradleScriptDir}/bintray.gradle"
    apply from: "${gradleScriptDir}/maven-publish.gradle"

    compileJava.dependsOn(processResources)

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    jar {
        manifest {
            attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    configurations {
        allurePlugin
    }

    task copyPlugins(type: Sync) {
        dependsOn configurations.allurePlugin
        from {
            configurations.allurePlugin.collect { zipTree(it) }
        }
        into "$buildDir/plugins/"
        eachFile { FileCopyDetails details ->
            def segments = details.relativePath.segments
            segments[0] = segments[0].replace("-${project.version}", '')
        }
        includeEmptyDirs = false
    }

    apply plugin: 'ru.vyarus.quality'

    quality {
        configDir = "$gradleScriptDir/quality-configs"
        excludeSources = fileTree('build/generated-sources')
        exclude '**/*.json'
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.7.9'
    }
}
