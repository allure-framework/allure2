description = 'Allure Web'

apply plugin: 'com.moowork.node'
apply from: "${gradleScriptDir}/bintray.gradle"
apply plugin: 'maven'

node {
    version = '6.3.1'
    npmVersion = '3.10.3'
    download = true
}

task buildWeb(type: NpmTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src'))
    inputs.file('package.json')
    inputs.file('jasmine.json')
    inputs.file('webpack.config.js')
    inputs.file('.babelrc')
    inputs.file('.eslintrc')

    outputs.dir('build/resources/main')

    args = ['run', 'build']
}

buildWeb.dependsOn npmInstall
processResources.dependsOn buildWeb

dependencies {
    compileOnly project(':allure-generator')
    compileOnly 'org.slf4j:slf4j-simple'

    allurePlugin project(path: ':behaviors-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':junit-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':packages-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':cucumber-json-plugin', configuration: 'allurePlugin')
}

def resultsDirectory = findProperty('results') ?: 'demo'

task cleanUpDemoReport(type: Delete) {
    delete file('build/demo-report')
}

task generateDemoReport(type: JavaExec) {
    dependsOn cleanUpDemoReport
    main = 'io.qameta.allure.DummyReportGenerator'
    classpath = sourceSets.main.compileClasspath
    systemProperties += ['allure.pluginsDirectory': file('build/plugins')]
    args = [
            file("test-data/${resultsDirectory}"),
            file('build/demo-report')
    ]
}

task write {
    println("start up development server on localhost:3000 (${resultsDirectory})")
}

task dev {
    dependsOn write, generateDemoReport, copyPlugins, npm_run_start
}
