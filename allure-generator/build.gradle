description = 'Allure Report Generator'

apply plugin: 'com.moowork.node'

node {
    version = '8.1.3'
    yarnVersion = '0.24.6'
    download = true
}

task testWeb(type: YarnTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.files(fileTree('src/test/javascript'))
    inputs.file('package.json')
    inputs.file('webpack.config.js')
    inputs.file('.babelrc')
    inputs.file('.eslintrc')

    outputs.dir('build/resources/main')
    outputs.dir('build/resources/test')

    args = ['run', 'test']
}

task buildWeb(type: YarnTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.file('package.json')
    inputs.file('webpack.config.js')
    inputs.file('.babelrc')
    inputs.file('.eslintrc')

    outputs.dir('build/resources/main')

    args = ['run', 'build']
}

buildWeb.dependsOn yarn
testWeb.dependsOn yarn
processResources.dependsOn buildWeb
test.dependsOn testWeb

dependencies {
    allurePlugin project(path: ':behaviors-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':packages-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':screen-diff-plugin', configuration: 'allurePlugin')
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    compile project(':allure-plugin-api')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')
    compile('commons-io:commons-io')
    compile('io.qameta.allure:allure2-model-api')
    compile('org.allurefw:allure1-model')
    compile('org.apache.httpcomponents:httpclient')
    compile('org.apache.tika:tika-core')
    compileOnly('org.projectlombok:lombok')

    testCompile('com.google.guava:guava')
    testCompile('io.qameta.allure:allure-java-commons')
    testCompile('com.github.stefanbirkner:system-rules')
    testCompile('junit:junit')
    testCompile('org.apache.commons:commons-text')
    testCompile('org.assertj:assertj-core')
    testCompile('org.mockito:mockito-core')
    testCompile('org.slf4j:slf4j-simple')
}

def resultsDirectory = findProperty('results') ?: 'demo'

task cleanUpDemoReport(type: Delete) {
    delete file('build/demo-report')
}

task generateDemoReport(type: JavaExec) {
    dependsOn cleanUpDemoReport
    main = 'io.qameta.allure.DummyReportGenerator'
    classpath = sourceSets.test.runtimeClasspath
    systemProperty('allure.plugins.directory', 'build/plugins')
    args = [
            file("test-data/${resultsDirectory}"),
            file('build/demo-report')
    ]
}

task write {
    println("start up development server on localhost:3000 (${resultsDirectory})")
}

task dev {
    dependsOn write, generateDemoReport, copyPlugins, yarn_start
}