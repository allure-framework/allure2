description = 'Allure Report Generator'

apply plugin: 'com.moowork.node'

node {
    version = '10.10.0'
    npmVersion = '6.4.1'
    download = true
}

def generatedStatic = 'build/www'

task buildWeb(type: NpmTask) {
    group = 'Build'
    dependsOn npmInstall

    inputs.file(".prettierrc")
    inputs.file("package-lock.json")
    inputs.file("package.json")
    inputs.file('.eslintrc')
    inputs.files(fileTree("src/main/javascript"))
    inputs.files(fileTree("webpack"))

    outputs.dir(generatedStatic)

    args = ['run', 'build']
}

task testWeb(type: NpmTask) {
    group = 'Verification'
    dependsOn npmInstall
    
    inputs.file(".prettierrc")
    inputs.file("package-lock.json")
    inputs.file("package.json")
    inputs.file('.eslintrc')
    inputs.files(fileTree("src/test/javascript"))
    inputs.files(fileTree("webpack"))

    args = ['run', 'test']
}

processResources {
    dependsOn buildWeb
    from(generatedStatic)
}

test.dependsOn testWeb

dependencies {
    allurePlugin project(path: ':behaviors-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':packages-plugin', configuration: 'allurePlugin')
    allurePlugin project(path: ':screen-diff-plugin', configuration: 'allurePlugin')
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    compile project(':allure-plugin-api')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')
    compile('commons-io:commons-io')
    compile('io.qameta.allure:allure2-model-api')
    compile('org.allurefw:allure1-model')
    compile('org.apache.httpcomponents:httpclient')
    compile('org.apache.tika:tika-core')
    compileOnly('org.projectlombok:lombok')

    testCompile('com.google.guava:guava')
    testCompile('io.qameta.allure:allure-java-commons')
    testCompile('com.github.stefanbirkner:system-rules')
    testCompile('junit:junit')
    testCompile('org.apache.commons:commons-text')
    testCompile('org.assertj:assertj-core')
    testCompile('org.mockito:mockito-core')
    testCompile('org.slf4j:slf4j-simple')
}

def resultsDirectory = findProperty('results') ?: 'demo'

task cleanUpDemoReport(type: Delete) {
    delete file('build/demo-report')
}

task generateDemoReport(type: JavaExec) {
    dependsOn cleanUpDemoReport
    main = 'io.qameta.allure.DummyReportGenerator'
    classpath = sourceSets.test.runtimeClasspath
    systemProperty('allure.plugins.directory', 'build/plugins')
    args = [
            file("test-data/${resultsDirectory}"),
            file('build/demo-report')
    ]
}

task dev {
    dependsOn generateDemoReport, copyPlugins, npm_start
    doLast {
        println("start up development server on localhost:3000 (${resultsDirectory})")
    }
}