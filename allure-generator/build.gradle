description = 'Allure Report Generator'

apply from: "${gradleScriptDir}/maven-publish.gradle"
apply from: "${gradleScriptDir}/jaxb.gradle"
apply from: "${gradleScriptDir}/bintray.gradle"
apply plugin: 'maven'

apply plugin: 'com.moowork.node'

node {
    version = '8.1.3'
    yarnVersion = '0.24.6'
    download = true
}

task testWeb(type: YarnTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.files(fileTree('src/test/javascript'))
    inputs.file('package.json')
    inputs.file('jasmine.json')
    inputs.file('webpack.config.js')
    inputs.file('.babelrc')
    inputs.file('.eslintrc')

    outputs.dir('build/resources/main')
    outputs.dir('build/resources/test')

    args = ['run', 'test']
}

task buildWeb(type: YarnTask) {
    inputs.files(fileTree('node_modules'))
    inputs.files(fileTree('src/main/javascript'))
    inputs.file('package.json')
    inputs.file('jasmine.json')
    inputs.file('webpack.config.js')
    inputs.file('.babelrc')
    inputs.file('.eslintrc')

    outputs.dir('build/resources/main')

    args = ['run', 'build']
}

buildWeb.dependsOn yarn
testWeb.dependsOn yarn
processResources.dependsOn buildWeb
test.dependsOn testWeb

dependencies {
    compile project(':allure-plugin-api')
    compile('org.allurefw:allure1-model')
    compile('io.qameta.allure:allure2-model-api')
    compile('org.apache.tika:tika-core')
    compile('commons-io:commons-io')

    testCompile('junit:junit')
    testCompile('org.assertj:assertj-core')
    testCompile('org.mockito:mockito-core')
    testCompile('org.slf4j:slf4j-simple')
    testCompile('org.apache.commons:commons-lang3')
    testCompile('com.google.guava:guava')
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourceJar
}

def resultsDirectory = findProperty('results') ?: 'demo'

task cleanUpDemoReport(type: Delete) {
    delete file('build/demo-report')
}

task generateDemoReport(type: JavaExec) {
    dependsOn cleanUpDemoReport
    main = 'io.qameta.allure.DummyReportGenerator'
    classpath = sourceSets.test.runtimeClasspath
    args = [
            file("test-data/${resultsDirectory}"),
            file('build/demo-report')
    ]
}

task write {
    println("start up development server on localhost:3000 (${resultsDirectory})")
}

task dev {
    dependsOn write, generateDemoReport, copyPlugins, yarn_start
}